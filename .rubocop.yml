# ----- CONFIGURED -----

AllCops:
  TargetRubyVersion: 2.1
  DisplayCopNames: true

# We use filenames such as “create-site.rb” that translate to method names.
FileName:
  Exclude:
    - 'lib/nanoc/cli/commands/*.rb'

# A common pattern in tests is to define anonymous classes in which methods are defined, which trips
# up Rubocop’s nested method definition cop.
Lint/NestedMethodDefinition:
  Exclude:
    - 'test/**/*.rb'
    - 'spec/**/*.rb'

# This is used in tests, to verify the effect of state-changing functions.
Style/GlobalVars:
  Exclude:
    - 'test/**/*.rb'

Style/TrailingCommaInArguments:
  EnforcedStyleForMultiline: comma

Style/TrailingCommaInLiteral:
  EnforcedStyleForMultiline: comma

# `rescue nil` is useful in specs where the exception is not important, but
# the size effects are.
Style/RescueModifier:
  Exclude:
    - 'spec/**/*.rb'

Style/IndentArray:
  EnforcedStyle: consistent

Lint/DuplicateMethods:
  Exclude:
    - 'test/data_sources/test_filesystem.rb'
    - 'spec/spec_helper.rb'

# This needs to be fixed in Ruby 2.4.
Lint/UnifiedInteger:
  Enabled: false



# ----- TO ENABLE LATER -----

# Valid cops, but fixing the offenses they report is non-trivial.

RegexpLiteral:
  Enabled: false

ClassAndModuleChildren:
  Enabled: false

Style/EmptyElse:
  Enabled: false

Style/Next:
  Enabled: false

Lint/IneffectiveAccessModifier:
  Enabled: false

Lint/UselessAccessModifier:
  Enabled: false



# ----- DISABLED (hard) -----

# Rubocop trips up on this.
Style/LeadingCommentSpace:
  Enabled: false



# ----- DISABLED (security) -----

# Nanoc runs offline in a trusted environment, and these security checks are false positives.

Security/YAMLLoad:
  Enabled: false

Security/MarshalLoad:
  Enabled: false

Security/Eval:
  Exclude:
    - 'test/**/*.rb'
    - 'spec/**/*.rb'
    - 'lib/nanoc/base/entities/code_snippet.rb'



# ----- DISABLED (metrics) -----

# Cops for metrics are disabled because they should not cause tests to fail.

Metrics/AbcSize:
  Enabled: false

Metrics/BlockLength:
  Enabled: false

Metrics/BlockNesting:
  Enabled: false

Metrics/ClassLength:
  Enabled: false

Metrics/CyclomaticComplexity:
  Enabled: false

Metrics/LineLength:
  Enabled: false

Metrics/MethodLength:
  Enabled: false

Metrics/ModuleLength:
  Enabled: false

Metrics/ParameterLists:
  Enabled: false

Metrics/PerceivedComplexity:
  Enabled: false



# ----- DISABLED (opinionated) -----

# We should embrace UTF-8, not avoid it. Since the Encoding cop is enabled,
# there’s no point in enforcing ASCII comments.
AsciiComments:
  Enabled: false

# It does not make sense to enforce everything to have documentation.
Documentation:
  Enabled: false

# Nanoc suppresses exceptions for valid reasons in a few cases.
HandleExceptions:
  Enabled: false

# if/unless at the end of the line makes it too easy to oversee.
IfUnlessModifier:
  Enabled: false

# Personal preference is to have decent constructors for exceptions rather than
# just a class and a message.
RaiseArgs:
  Enabled: false

# Personal preference is to use `raise` to signal exceptions (normal control
# flow should not use exceptions anyway).
SignalException:
  Enabled: false

# Some methods that appear to be accessors (return a single value or set a
# single value) should still not be considered to be accessors. This is a purely
# semantic difference.
TrivialAccessors:
  Enabled: false

# This does not always semantically make sense.
GuardClause:
  Enabled: false
